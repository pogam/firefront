netcdf FI20m.1.SEG01.002 {
dimensions:
	S32 = 32 ;
	Z = 47 ;
	X = 22 ;
	Y = 22 ;
	D3 = 3 ;
	D4 = 4 ;
	D2 = 2 ;
	D6 = 6 ;
variables:
	int MASDEV ;
		MASDEV:GRID = 0 ;
		MASDEV:COMMENT = "" ;
	int BUGFIX ;
		BUGFIX:GRID = 0 ;
		BUGFIX:COMMENT = "" ;
	char BIBUSER(S32) ;
		BIBUSER:GRID = 0 ;
		BIBUSER:COMMENT = "" ;
	char PROGRAM(S32) ;
		PROGRAM:GRID = 0 ;
		PROGRAM:COMMENT = "" ;
	char MY_NAME(S32) ;
		MY_NAME:GRID = 0 ;
		MY_NAME:COMMENT = "" ;
	char DAD_NAME(S32) ;
		DAD_NAME:GRID = 0 ;
		DAD_NAME:COMMENT = "" ;
	int DXRATIO ;
		DXRATIO:GRID = 0 ;
		DXRATIO:COMMENT = "" ;
	int DYRATIO ;
		DYRATIO:GRID = 0 ;
		DYRATIO:COMMENT = "" ;
	int XOR ;
		XOR:GRID = 0 ;
		XOR:COMMENT = "" ;
	int YOR ;
		YOR:GRID = 0 ;
		YOR:COMMENT = "" ;
	char STORAGE_TYPE(S32) ;
		STORAGE_TYPE:GRID = 0 ;
		STORAGE_TYPE:COMMENT = "" ;
	int IMAX ;
		IMAX:GRID = 0 ;
		IMAX:COMMENT = "" ;
	int JMAX ;
		JMAX:GRID = 0 ;
		JMAX:COMMENT = "" ;
	int JPHEXT ;
		JPHEXT:GRID = 0 ;
		JPHEXT:COMMENT = "" ;
	int KMAX ;
		KMAX:GRID = 0 ;
		KMAX:COMMENT = "" ;
	int THINSHELL ;
		THINSHELL:GRID = 0 ;
		THINSHELL:COMMENT = "" ;
	double LAT0 ;
		LAT0:GRID = 0 ;
		LAT0:COMMENT = "reference latitude for conformal projection (DEGREES)" ;
	double LON0 ;
		LON0:GRID = 0 ;
		LON0:COMMENT = "reference longitude for conformal projection (DEGREES)" ;
	double BETA ;
		BETA:GRID = 0 ;
		BETA:COMMENT = "rotation angle (DEGREES)" ;
	double XHAT(X) ;
		XHAT:GRID = 2 ;
		XHAT:COMMENT = "Position x in the conformal or cartesian plane (METERS)" ;
	double YHAT(Y) ;
		YHAT:GRID = 3 ;
		YHAT:COMMENT = "Position y in the conformal or cartesian plane (METERS)" ;
	double ZHAT(Z) ;
		ZHAT:GRID = 4 ;
		ZHAT:COMMENT = "height level without orography (METERS)" ;
	double ZS(Y, X) ;
		ZS:GRID = 4 ;
		ZS:COMMENT = "orography (METERS)" ;
	double ZSMT(Y, X) ;
		ZSMT:GRID = 4 ;
		ZSMT:COMMENT = "smooth orography (METERS)" ;
	int SLEVE ;
		SLEVE:GRID = 4 ;
		SLEVE:COMMENT = "" ;
	int DTCUR__TDATE(D3) ;
		DTCUR__TDATE:GRID = 4 ;
		DTCUR__TDATE:COMMENT = "YYYYMMDD" ;
	double DTCUR__TIME ;
		DTCUR__TIME:GRID = 4 ;
		DTCUR__TIME:COMMENT = "SECONDS" ;
	int DTEXP__TDATE(D3) ;
		DTEXP__TDATE:GRID = 4 ;
		DTEXP__TDATE:COMMENT = "YYYYMMDD" ;
	double DTEXP__TIME ;
		DTEXP__TIME:GRID = 4 ;
		DTEXP__TIME:COMMENT = "SECONDS" ;
	int DTMOD__TDATE(D3) ;
		DTMOD__TDATE:GRID = 4 ;
		DTMOD__TDATE:COMMENT = "YYYYMMDD" ;
	double DTMOD__TIME ;
		DTMOD__TIME:GRID = 4 ;
		DTMOD__TIME:COMMENT = "SECONDS" ;
	int DTSEG__TDATE(D3) ;
		DTSEG__TDATE:GRID = 4 ;
		DTSEG__TDATE:COMMENT = "YYYYMMDD" ;
	double DTSEG__TIME ;
		DTSEG__TIME:GRID = 4 ;
		DTSEG__TIME:COMMENT = "SECONDS" ;
	int L1D ;
		L1D:GRID = 0 ;
		L1D:COMMENT = "" ;
	int L2D ;
		L2D:GRID = 0 ;
		L2D:COMMENT = "" ;
	int PACK ;
		PACK:GRID = 0 ;
		PACK:COMMENT = "" ;
	int CARTESIAN ;
		CARTESIAN:GRID = 0 ;
		CARTESIAN:COMMENT = "Logical for cartesian geometry" ;
	int LBOUSS ;
		LBOUSS:GRID = 0 ;
		LBOUSS:COMMENT = "Logical for boussinesq" ;
	char SURF(S32) ;
		SURF:GRID = 0 ;
		SURF:COMMENT = "" ;
	int CPL_AROME ;
		CPL_AROME:GRID = 0 ;
		CPL_AROME:COMMENT = "Logical for arome coupling file" ;
	int COUPLING ;
		COUPLING:GRID = 0 ;
		COUPLING:COMMENT = "Logical for coupling file" ;
	double UT(Z, Y, X) ;
		UT:GRID = 2 ;
		UT:COMMENT = "X_Y_Z_U component of wind (m/s)" ;
	double VT(Z, Y, X) ;
		VT:GRID = 3 ;
		VT:COMMENT = "X_Y_Z_V component of wind (m/s)" ;
	double WT(Z, Y, X) ;
		WT:GRID = 4 ;
		WT:COMMENT = "X_Y_Z_vertical wind (m/s)" ;
	double THT(Z, Y, X) ;
		THT:GRID = 1 ;
		THT:COMMENT = "X_Y_Z_potential temperature (K)" ;
	double UM(Z, Y, X) ;
		UM:GRID = 2 ;
		UM:COMMENT = "X_Y_Z_U component of wind (m/s)" ;
	double VM(Z, Y, X) ;
		VM:GRID = 3 ;
		VM:COMMENT = "X_Y_Z_V component of wind (m/s)" ;
	double WM(Z, Y, X) ;
		WM:GRID = 4 ;
		WM:COMMENT = "X_Y_Z_vertical wind (m/s)" ;
	double DUM(Z, Y, X) ;
		DUM:GRID = 2 ;
		DUM:COMMENT = "X_Y_Z_U component of wind (m/s)" ;
	double DVM(Z, Y, X) ;
		DVM:GRID = 3 ;
		DVM:COMMENT = "X_Y_Z_V component of wind (m/s)" ;
	double DWM(Z, Y, X) ;
		DWM:GRID = 4 ;
		DWM:COMMENT = "X_Y_Z_vertical wind (m/s)" ;
	double TKET(Z, Y, X) ;
		TKET:GRID = 1 ;
		TKET:COMMENT = "X_Y_Z_Turbulent Kinetic Energy (M**2/S**2)" ;
	double TKEMS(Z, Y, X) ;
		TKEMS:GRID = 1 ;
		TKEMS:COMMENT = "X_Y_Z_Turbulent Kinetic Energy adv source (M**2/S**3)" ;
	double PABST(Z, Y, X) ;
		PABST:GRID = 1 ;
		PABST:COMMENT = "X_Y_Z_ABSolute Pressure (Pa)" ;
	double RVT(Z, Y, X) ;
		RVT:GRID = 1 ;
		RVT:COMMENT = "X_Y_Z_Vapor mixing Ratio (KG/KG)" ;
	double SVT001(Z, Y, X) ;
		SVT001:GRID = 1 ;
		SVT001:COMMENT = "X_Y_Z_SVT001 (KG/KG)" ;
	double SVT002(Z, Y, X) ;
		SVT002:GRID = 1 ;
		SVT002:COMMENT = "X_Y_Z_SVT002 (KG/KG)" ;
	double SVT003(Z, Y, X) ;
		SVT003:GRID = 1 ;
		SVT003:COMMENT = "X_Y_Z_SVT003 (KG/KG)" ;
	int NSV--DIM ;
		NSV--DIM:GRID = 0 ;
		NSV--DIM:COMMENT = "" ;
	double LSUM(Z, Y, X) ;
		LSUM:GRID = 2 ;
		LSUM:COMMENT = "X_Y_Z_Large Scale U component (M/S)" ;
	double LSVM(Z, Y, X) ;
		LSVM:GRID = 3 ;
		LSVM:COMMENT = "X_Y_Z_Large Scale V component (M/S)" ;
	double LSWM(Z, Y, X) ;
		LSWM:GRID = 4 ;
		LSWM:COMMENT = "X_Y_Z_Large Scale vertical wind (M/S)" ;
	double LSTHM(Z, Y, X) ;
		LSTHM:GRID = 1 ;
		LSTHM:COMMENT = "X_Y_Z_Large Scale potential Temperature (K)" ;
	double LSRVM(Z, Y, X) ;
		LSRVM:GRID = 1 ;
		LSRVM:COMMENT = "X_Y_Z_Large Scale Vapor Mixing Ratio (KG/KG)" ;
	int RIMX ;
		RIMX:GRID = 1 ;
		RIMX:COMMENT = "" ;
	int RIMY ;
		RIMY:GRID = 1 ;
		RIMY:COMMENT = "" ;
	int HORELAX_UVWTH ;
		HORELAX_UVWTH:GRID = 1 ;
		HORELAX_UVWTH:COMMENT = "" ;
	double LBXUM(Z, Y, D4) ;
		LBXUM:GRID = 2 ;
		LBXUM:COMMENT = "2_Y_Z_LBXUM (M/S)" ;
	double LBYUM(Z, D2, X) ;
		LBYUM:GRID = 2 ;
		LBYUM:COMMENT = "X_2_Z_LBYUM (M/S)" ;
	double LBXVM(Z, Y, D2) ;
		LBXVM:GRID = 3 ;
		LBXVM:COMMENT = "2_Y_Z_LBXVM (M/S)" ;
	double LBYVM(Z, D4, X) ;
		LBYVM:GRID = 3 ;
		LBYVM:COMMENT = "X_2_Z_LBYVM (M/S)" ;
	double LBXWM(Z, Y, D2) ;
		LBXWM:GRID = 4 ;
		LBXWM:COMMENT = "2_Y_Z_LBXWM (M/S)" ;
	double LBYWM(Z, D2, X) ;
		LBYWM:GRID = 4 ;
		LBYWM:COMMENT = "X_2_Z_LBYWM (M/S)" ;
	double LBXTHM(Z, Y, D2) ;
		LBXTHM:GRID = 1 ;
		LBXTHM:COMMENT = "2_Y_Z_LBXTHM (K)" ;
	double LBYTHM(Z, D2, X) ;
		LBYTHM:GRID = 1 ;
		LBYTHM:COMMENT = "X_2_Z_LBYTHM (K)" ;
	int HORELAX_TKE ;
		HORELAX_TKE:GRID = 1 ;
		HORELAX_TKE:COMMENT = "X_2_Z_LBYTHM (K)" ;
	double LBXTKEM(Z, Y, D2) ;
		LBXTKEM:GRID = 1 ;
		LBXTKEM:COMMENT = "2_Y_Z_LBXTKEM (M**2/S**2)" ;
	double LBYTKEM(Z, D2, X) ;
		LBYTKEM:GRID = 1 ;
		LBYTKEM:COMMENT = "X_2_Z_LBYTKEM (M**2/S**2)" ;
	int HORELAX_R ;
		HORELAX_R:GRID = 1 ;
		HORELAX_R:COMMENT = "" ;
	double LBXRVM(Z, Y, D2) ;
		LBXRVM:GRID = 1 ;
		LBXRVM:COMMENT = "2_Y_Z_LBXRVM (KG/KG)" ;
	double LBYRVM(Z, D2, X) ;
		LBYRVM:GRID = 1 ;
		LBYRVM:COMMENT = "2_Y_Z_LBYRVM (KG/KG)" ;
	int HORELAX_SV ;
		HORELAX_SV:GRID = 1 ;
		HORELAX_SV:COMMENT = "" ;
	double LBXSVM001(Z, Y, D2) ;
		LBXSVM001:GRID = 1 ;
		LBXSVM001:COMMENT = "2_Y_Z_LBXSVM001 (KG/KG)" ;
	double LBYSVM001(Z, D2, X) ;
		LBYSVM001:GRID = 1 ;
		LBYSVM001:COMMENT = "X_2_Z_LBYSVM001 (KG/KG)" ;
	double LBXSVM002(Z, Y, D2) ;
		LBXSVM002:GRID = 1 ;
		LBXSVM002:COMMENT = "2_Y_Z_LBXSVM002 (KG/KG)" ;
	double LBYSVM002(Z, D2, X) ;
		LBYSVM002:GRID = 1 ;
		LBYSVM002:COMMENT = "X_2_Z_LBYSVM002 (KG/KG)" ;
	double LBX_FF(Z, Y, D2) ;
		LBX_FF:GRID = 1 ;
		LBX_FF:COMMENT = "2_Y_Z_LBX_FF003 (KG/KG)" ;
	double LBY_FF(Z, D2, X) ;
		LBY_FF:GRID = 1 ;
		LBY_FF:COMMENT = "X_2_Z_LBY_FF003 (KG/KG)" ;
	double DRYMASST ;
		DRYMASST:GRID = 0 ;
		DRYMASST:COMMENT = "Total Dry Mass (KG)" ;
	double WTHVMF(Z, Y, X) ;
		WTHVMF:GRID = 1 ;
		WTHVMF:COMMENT = "X_Y_WTHVMF (mK/s)" ;
	double RHOREFZ(Z) ;
		RHOREFZ:GRID = 4 ;
		RHOREFZ:COMMENT = "rhodz for reference state without orography (kg/m3)" ;
	double THVREFZ(Z) ;
		THVREFZ:GRID = 4 ;
		THVREFZ:COMMENT = "thetavz for reference state without orography (K)" ;
	double EXNTOP ;
		EXNTOP:GRID = 4 ;
		EXNTOP:COMMENT = "Exner function at model top" ;
	double US_PRES(Z, Y, X) ;
		US_PRES:GRID = 2 ;
		US_PRES:COMMENT = "X_Y_Z_US_PRES" ;
	double VS_PRES(Z, Y, X) ;
		VS_PRES:GRID = 3 ;
		VS_PRES:COMMENT = "X_Y_Z_VS_PRES" ;
	double WS_PRES(Z, Y, X) ;
		WS_PRES:GRID = 4 ;
		WS_PRES:COMMENT = "X_Y_Z_WS_PRES" ;
	double THS_CLD(Z, Y, X) ;
		THS_CLD:GRID = 1 ;
		THS_CLD:COMMENT = "X_Y_Z_THS_CLD" ;
	double RVS_CLD(Z, Y, X) ;
		RVS_CLD:GRID = 1 ;
		RVS_CLD:COMMENT = "X_Y_Z_RVS_CLD" ;
	int DTRAD_FULL__TDATE(D3) ;
		DTRAD_FULL__TDATE:GRID = 1 ;
		DTRAD_FULL__TDATE:COMMENT = "YYYYMMDD" ;
	double DTRAD_FULL__TIME ;
		DTRAD_FULL__TIME:GRID = 1 ;
		DTRAD_FULL__TIME:COMMENT = "SECONDS" ;
	int DTRAD_CLLY__TDATE(D3) ;
		DTRAD_CLLY__TDATE:GRID = 1 ;
		DTRAD_CLLY__TDATE:COMMENT = "YYYYMMDD" ;
	double DTRAD_CLLY__TIME ;
		DTRAD_CLLY__TIME:GRID = 1 ;
		DTRAD_CLLY__TIME:COMMENT = "SECONDS" ;
	double DTHRAD(Z, Y, X) ;
		DTHRAD:GRID = 1 ;
		DTHRAD:COMMENT = "X_Y_Z_RADiative heating/cooling rate (K/s)" ;
	double FLALWD(Y, X) ;
		FLALWD:GRID = 1 ;
		FLALWD:COMMENT = "X_Y_Downward Long Waves on FLAT surface (W/M2)" ;
	double DIRFLASWD(D6, Y, X) ;
		DIRFLASWD:GRID = 1 ;
		DIRFLASWD:COMMENT = "X_Y_DIRect Downward Long Waves on FLAT surface (W/M2)" ;
	double SCAFLASWD(D6, Y, X) ;
		SCAFLASWD:GRID = 1 ;
		SCAFLASWD:COMMENT = "X_Y_SCAttered Downward Long Waves on FLAT surface (W/M2)" ;
	double DIRSRFSWD(D6, Y, X) ;
		DIRSRFSWD:GRID = 1 ;
		DIRSRFSWD:COMMENT = "X_Y_DIRect Downward Long Waves (W/M2)" ;
	int CLEARCOL_TM1(Y, X) ;
		CLEARCOL_TM1:GRID = 1 ;
		CLEARCOL_TM1:COMMENT = "TRACE OF CLOUD" ;
	double ZENITH(Y, X) ;
		ZENITH:GRID = 1 ;
		ZENITH:COMMENT = "X_Y_ZENITH (RAD)" ;
	double AZIM(Y, X) ;
		AZIM:GRID = 1 ;
		AZIM:COMMENT = "X_Y_AZIMuth (RAD)" ;
	double DIR_ALB(D6, Y, X) ;
		DIR_ALB:GRID = 1 ;
		DIR_ALB:COMMENT = "X_Y_DIRect ALBedo (-)" ;
	double SCA_ALB(D6, Y, X) ;
		SCA_ALB:GRID = 1 ;
		SCA_ALB:COMMENT = "X_Y_SCAttered ALBedo (-)" ;
	double EMIS(Y, X) ;
		EMIS:GRID = 1 ;
		EMIS:COMMENT = "X_Y_EMISsivity (-)" ;
	double TSRAD(Y, X) ;
		TSRAD:GRID = 1 ;
		TSRAD:COMMENT = "X_Y_RADiative Surface Temperature (K)" ;
	double SSO_ANIS(Y, X) ;
		SSO_ANIS:GRID = 4 ;
		SSO_ANIS:COMMENT = "X_Y_SSO_ANISOTROPY (m)" ;
	double SSO_SLOPE(Y, X) ;
		SSO_SLOPE:GRID = 4 ;
		SSO_SLOPE:COMMENT = "X_Y_SSO_SLOPE" ;
	double SSO_DIR(Y, X) ;
		SSO_DIR:GRID = 4 ;
		SSO_DIR:COMMENT = "X_Y_SSO_DIR (degree)" ;
	double AVG_ZS(Y, X) ;
		AVG_ZS:GRID = 4 ;
		AVG_ZS:COMMENT = "X_Y_AVG_ZS (m)" ;
	double SIL_ZS(Y, X) ;
		SIL_ZS:GRID = 4 ;
		SIL_ZS:COMMENT = "X_Y_SIL_ZS (m)" ;
	double MAX_ZS(Y, X) ;
		MAX_ZS:GRID = 4 ;
		MAX_ZS:COMMENT = "X_Y_MAX_ZS (m)" ;
	double MIN_ZS(Y, X) ;
		MIN_ZS:GRID = 4 ;
		MIN_ZS:COMMENT = "X_Y_MIN_ZS (m)" ;
	double SSO_STDEV(Y, X) ;
		SSO_STDEV:GRID = 4 ;
		SSO_STDEV:COMMENT = "X_Y_SSO_STDEV (m)" ;
	int DUMMY_GR_NBR ;
		DUMMY_GR_NBR:GRID = 0 ;
		DUMMY_GR_NBR:COMMENT = "INTEGER" ;
	int VERSION ;
		VERSION:GRID = 0 ;
		VERSION:COMMENT = "(-)" ;
	int BUG ;
		BUG:GRID = 0 ;
		BUG:COMMENT = "(-)" ;
	char STORAGETYPE(S32) ;
		STORAGETYPE:GRID = 0 ;
		STORAGETYPE:COMMENT = "(-)" ;
	int DIM_FULL ;
		DIM_FULL:GRID = 0 ;
		DIM_FULL:COMMENT = "(-)" ;
	char GRID_TYPE(S32) ;
		GRID_TYPE:GRID = 0 ;
		GRID_TYPE:COMMENT = "GRID TYPE" ;
	int SSO_CANOPY ;
		SSO_CANOPY:GRID = 0 ;
		SSO_CANOPY:COMMENT = "flag to use canopy levels" ;
	int SSO_CAN_LVL ;
		SSO_CAN_LVL:GRID = 0 ;
		SSO_CAN_LVL:COMMENT = "number of canopy levels" ;
	double SSO_CAN_Z01(Y, X) ;
		SSO_CAN_Z01:GRID = 4 ;
		SSO_CAN_Z01:COMMENT = "altitudes of canopy levels (m)" ;
	double SSO_CAN_Z02(Y, X) ;
		SSO_CAN_Z02:GRID = 4 ;
		SSO_CAN_Z02:COMMENT = "altitudes of canopy levels (m)" ;
	double SSO_CAN_Z03(Y, X) ;
		SSO_CAN_Z03:GRID = 4 ;
		SSO_CAN_Z03:COMMENT = "altitudes of canopy levels (m)" ;
	double SSO_CAN_Z04(Y, X) ;
		SSO_CAN_Z04:GRID = 4 ;
		SSO_CAN_Z04:COMMENT = "altitudes of canopy levels (m)" ;
	double SSO_CAN_Z05(Y, X) ;
		SSO_CAN_Z05:GRID = 4 ;
		SSO_CAN_Z05:COMMENT = "altitudes of canopy levels (m)" ;
	double SSO_CAN_Z06(Y, X) ;
		SSO_CAN_Z06:GRID = 4 ;
		SSO_CAN_Z06:COMMENT = "altitudes of canopy levels (m)" ;
	double SSO_CAN_U01(Y, X) ;
		SSO_CAN_U01:GRID = 4 ;
		SSO_CAN_U01:COMMENT = "wind at canopy levels (m/s)" ;
	double SSO_CAN_U02(Y, X) ;
		SSO_CAN_U02:GRID = 4 ;
		SSO_CAN_U02:COMMENT = "wind at canopy levels (m/s)" ;
	double SSO_CAN_U03(Y, X) ;
		SSO_CAN_U03:GRID = 4 ;
		SSO_CAN_U03:COMMENT = "wind at canopy levels (m/s)" ;
	double SSO_CAN_U04(Y, X) ;
		SSO_CAN_U04:GRID = 4 ;
		SSO_CAN_U04:COMMENT = "wind at canopy levels (m/s)" ;
	double SSO_CAN_U05(Y, X) ;
		SSO_CAN_U05:GRID = 4 ;
		SSO_CAN_U05:COMMENT = "wind at canopy levels (m/s)" ;
	double SSO_CAN_U06(Y, X) ;
		SSO_CAN_U06:GRID = 4 ;
		SSO_CAN_U06:COMMENT = "wind at canopy levels (m/s)" ;
	double SSO_CAN_E01(Y, X) ;
		SSO_CAN_E01:GRID = 4 ;
		SSO_CAN_E01:COMMENT = "Tke at canopy levels (m2/s2)" ;
	double SSO_CAN_E02(Y, X) ;
		SSO_CAN_E02:GRID = 4 ;
		SSO_CAN_E02:COMMENT = "Tke at canopy levels (m2/s2)" ;
	double SSO_CAN_E03(Y, X) ;
		SSO_CAN_E03:GRID = 4 ;
		SSO_CAN_E03:COMMENT = "Tke at canopy levels (m2/s2)" ;
	double SSO_CAN_E04(Y, X) ;
		SSO_CAN_E04:GRID = 4 ;
		SSO_CAN_E04:COMMENT = "Tke at canopy levels (m2/s2)" ;
	double SSO_CAN_E05(Y, X) ;
		SSO_CAN_E05:GRID = 4 ;
		SSO_CAN_E05:COMMENT = "Tke at canopy levels (m2/s2)" ;
	double SSO_CAN_E06(Y, X) ;
		SSO_CAN_E06:GRID = 4 ;
		SSO_CAN_E06:COMMENT = "Tke at canopy levels (m2/s2)" ;
	int RW_PRECIP ;
		RW_PRECIP:GRID = 0 ;
		RW_PRECIP:COMMENT = "flag to store precip fields in restart file" ;
	int BUDC ;
		BUDC:GRID = 0 ;
		BUDC:COMMENT = "flag for accumulated variables" ;
	double RED_TH1(Z, Y, X) ;
		RED_TH1:GRID = 4 ;
		RED_TH1:COMMENT = "X_Y_Z_RED_TH1 (0)" ;
	double RED_R1(Z, Y, X) ;
		RED_R1:GRID = 4 ;
		RED_R1:COMMENT = "X_Y_Z_RED_R1 (0)" ;
	double RED2_TH3(Z, Y, X) ;
		RED2_TH3:GRID = 4 ;
		RED2_TH3:COMMENT = "X_Y_Z_RED2_TH3 (0)" ;
	double RED2_R3(Z, Y, X) ;
		RED2_R3:GRID = 4 ;
		RED2_R3:COMMENT = "X_Y_Z_RED2_R3 (0)" ;
	double RED2_THR3(Z, Y, X) ;
		RED2_THR3:GRID = 4 ;
		RED2_THR3:COMMENT = "X_Y_Z_RED2_THR3 (0)" ;
	double THW_FLX(Z, Y, X) ;
		THW_FLX:GRID = 4 ;
		THW_FLX:COMMENT = "X_Y_Z_THW_FLX (K*M/S)" ;
	double RCONSW_FLX(Z, Y, X) ;
		RCONSW_FLX:GRID = 4 ;
		RCONSW_FLX:COMMENT = "X_Y_Z_RCONSW_FLX (KG*M/S/KG)" ;
	double THL_VVAR(Z, Y, X) ;
		THL_VVAR:GRID = 1 ;
		THL_VVAR:COMMENT = "X_Y_Z_THL_VVAR (KELVIN**2)" ;
	double THLRCONS_VCOR(Z, Y, X) ;
		THLRCONS_VCOR:GRID = 1 ;
		THLRCONS_VCOR:COMMENT = "X_Y_Z_THLRCONS_VCOR (KELVIN*KG/KG)" ;
	double RTOT_VVAR(Z, Y, X) ;
		RTOT_VVAR:GRID = 1 ;
		RTOT_VVAR:COMMENT = "X_Y_Z_RTOT_VVAR (KG/KG **2)" ;
	double UW_VFLX(Z, Y, X) ;
		UW_VFLX:GRID = 4 ;
		UW_VFLX:COMMENT = "X_Y_Z_UW_VFLX (M**2/S**2)" ;
	double VW_VFLX(Z, Y, X) ;
		VW_VFLX:GRID = 4 ;
		VW_VFLX:COMMENT = "X_Y_Z_VW_VFLX (M**2/S**2)" ;
	double WSV_FLX_001(Z, Y, X) ;
		WSV_FLX_001:GRID = 4 ;
		WSV_FLX_001:COMMENT = "X_Y_Z_WSV_FLX_001      (SVUNIT*M/S)" ;
	double WSV_FLX_002(Z, Y, X) ;
		WSV_FLX_002:GRID = 4 ;
		WSV_FLX_002:COMMENT = "X_Y_Z_WSV_FLX_002      (SVUNIT*M/S)" ;
	double WSV_FLX_003(Z, Y, X) ;
		WSV_FLX_003:GRID = 4 ;
		WSV_FLX_003:COMMENT = "X_Y_Z_WSV_FLX_003      (SVUNIT*M/S)" ;
	double PHI3(Z, Y, X) ;
		PHI3:GRID = 4 ;
		PHI3:COMMENT = "X_Y_Z_PHI3 (0)" ;
	double PSI3(Z, Y, X) ;
		PSI3:GRID = 4 ;
		PSI3:COMMENT = "X_Y_Z_PSI3 (0)" ;
	double PSI_SV_001(Z, Y, X) ;
		PSI_SV_001:GRID = 4 ;
		PSI_SV_001:COMMENT = "X_Y_Z_PSI_SV_001       (0)" ;
	double PSI_SV_002(Z, Y, X) ;
		PSI_SV_002:GRID = 4 ;
		PSI_SV_002:COMMENT = "X_Y_Z_PSI_SV_002       (0)" ;
	double PSI_SV_003(Z, Y, X) ;
		PSI_SV_003:GRID = 4 ;
		PSI_SV_003:COMMENT = "X_Y_Z_PSI_SV_003       (0)" ;
	double UTHL_FLX(Z, Y, X) ;
		UTHL_FLX:GRID = 2 ;
		UTHL_FLX:COMMENT = "X_Y_Z_UTHL_FLX (KELVIN*M/S)" ;
	double UR_FLX(Z, Y, X) ;
		UR_FLX:GRID = 2 ;
		UR_FLX:COMMENT = "X_Y_Z_UR_FLX (KG/KG * M/S)" ;
	double VTHL_FLX(Z, Y, X) ;
		VTHL_FLX:GRID = 3 ;
		VTHL_FLX:COMMENT = "X_Y_Z_VTHL_FLX (KELVIN*M/S)" ;
	double VR_FLX(Z, Y, X) ;
		VR_FLX:GRID = 3 ;
		VR_FLX:COMMENT = "X_Y_Z_VR_FLX (KG/KG * M/S)" ;
	double THL_HVAR(Z, Y, X) ;
		THL_HVAR:GRID = 1 ;
		THL_HVAR:COMMENT = "X_Y_Z_THL_HVAR (KELVIN**2)" ;
	double THLR_HCOR(Z, Y, X) ;
		THLR_HCOR:GRID = 1 ;
		THLR_HCOR:COMMENT = "X_Y_Z_THLR_HCOR (KELVIN*KG/KG)" ;
	double R_HVAR(Z, Y, X) ;
		R_HVAR:GRID = 1 ;
		R_HVAR:COMMENT = "X_Y_Z_R_HVAR (KG/KG **2)" ;
	double U_VAR(Z, Y, X) ;
		U_VAR:GRID = 1 ;
		U_VAR:COMMENT = "X_Y_Z_U_VAR ( (M/S)**2)" ;
	double V_VAR(Z, Y, X) ;
		V_VAR:GRID = 1 ;
		V_VAR:COMMENT = "X_Y_Z_V_VAR ( (M/S)**2)" ;
	double W_VAR(Z, Y, X) ;
		W_VAR:GRID = 1 ;
		W_VAR:COMMENT = "X_Y_Z_W_VAR ( (M/S)**2)" ;
	double UV_FLX(Z, Y, X) ;
		UV_FLX:GRID = 5 ;
		UV_FLX:COMMENT = "X_Y_Z_UV_FLX ( (M/S) **2 )" ;
	double UW_HFLX(Z, Y, X) ;
		UW_HFLX:GRID = 6 ;
		UW_HFLX:COMMENT = "X_Y_Z_UW_HFLX ( (M/S) **2 )" ;
	double VW_HFLX(Z, Y, X) ;
		VW_HFLX:GRID = 7 ;
		VW_HFLX:COMMENT = "X_Y_Z_VW_HFLX ( (M/S) **2 )" ;
	double USV_FLX_001(Z, Y, X) ;
		USV_FLX_001:GRID = 2 ;
		USV_FLX_001:COMMENT = "X_Y_Z_USV_FLX_001      (SVUNIT*M/S)" ;
	double VSV_FLX_001(Z, Y, X) ;
		VSV_FLX_001:GRID = 3 ;
		VSV_FLX_001:COMMENT = "X_Y_Z_VSV_FLX_001      (SVUNIT*M/S)" ;
	double USV_FLX_002(Z, Y, X) ;
		USV_FLX_002:GRID = 2 ;
		USV_FLX_002:COMMENT = "X_Y_Z_USV_FLX_002      (SVUNIT*M/S)" ;
	double VSV_FLX_002(Z, Y, X) ;
		VSV_FLX_002:GRID = 3 ;
		VSV_FLX_002:COMMENT = "X_Y_Z_VSV_FLX_002      (SVUNIT*M/S)" ;
	double USV_FLX_003(Z, Y, X) ;
		USV_FLX_003:GRID = 2 ;
		USV_FLX_003:COMMENT = "X_Y_Z_USV_FLX_003      (SVUNIT*M/S)" ;
	double VSV_FLX_003(Z, Y, X) ;
		VSV_FLX_003:GRID = 3 ;
		VSV_FLX_003:COMMENT = "X_Y_Z_VSV_FLX_003      (SVUNIT*M/S)" ;
}
